import React, { useState, useEffect, useRef } from 'react';
import { Sidebar } from "@/components/dashboard/Sidebar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  MapPin,
  AlertTriangle,
  Car,
  RefreshCw,
  Expand,
  X,
  Plus,
  Minus,
  Maximize2,
  Activity,
  Play,
  ChevronDown,
  Video,
  Settings
} from "lucide-react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import TrafficNodeService from '@/lib/trafficNodeService';
import { useVideoState } from '@/hooks/useVideoState';

interface SelectedRegion {
  lat: number;
  lng: number;
  address: string;
  trafficLevel: 'Low' | 'Medium' | 'High';
  vehicleCount: number;
  lastUpdate: string;
}

interface TrafficNode {
  lat: number;
  lng: number;
  severity: 'red' | 'yellow';
  radius: number;
}

interface Intersection {
  id: number;
  name: string;
  status: 'RED' | 'GREEN' | 'YELLOW';
  assignedVideo: string | null;
}

interface CameraFeed {
  id: string;
  name: string;
  isActive: boolean;
  currentVideo: string | null;
}

interface ConfirmationDialog {
  isOpen: boolean;
  intersectionId: number | null;
  newStatus: 'RED' | 'GREEN' | 'YELLOW' | null;
}

const AVAILABLE_VIDEOS = [
  '/videos/V1.mp4',
  '/videos/V2.mp4', 
  '/videos/V3.mp4',
  '/videos/V4.mp4',
  '/videos/V5.mp4',
  '/videos/V6.mp4',
  '/videos/V7.mp4',
  '/videos/V8.mp4'
];

const VideoPlayer = ({ videoSrc, initialTime, onTimeUpdate }: { videoSrc: string, initialTime: number, onTimeUpdate: (time: number) => void }) => {
  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    if (videoRef.current && videoSrc) {
      videoRef.current.src = videoSrc;
      videoRef.current.currentTime = initialTime;
      videoRef.current.play();
    }
  }, [videoSrc, initialTime]);

  return (
    <div className="relative w-full h-full">
      <video
        ref={videoRef}
        className="w-full h-full object-cover"
        autoPlay
        muted
        loop
        onTimeUpdate={() => {
          if (videoRef.current) {
            onTimeUpdate(videoRef.current.currentTime);
          }
        }}
      >
        Your browser does not support the video tag.
      </video>
    </div>
  );
};

const Camera = () => {
  const [selectedRegion, setSelectedRegion] = useState<SelectedRegion | null>(null);
  const [trafficNodes, setTrafficNodes] = useState<TrafficNode[]>([]);
  const [isMaximized, setIsMaximized] = useState(false);
  const [expandedCard, setExpandedCard] = useState<string | null>(null);
  const videoTimeRef = useRef(0);
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<L.Map | null>(null);
  const nodesLayerRef = useRef<L.LayerGroup | null>(null);
  const circleRef = useRef<L.Circle | null>(null);
  const { videos, setVideos } = useVideoState();

  // New state for intersections and camera feeds
  const [intersections, setIntersections] = useState<Intersection[]>([
    { id: 1, name: 'Intersection 1', status: 'GREEN', assignedVideo: null },
    { id: 2, name: 'Intersection 2', status: 'RED', assignedVideo: null },
    { id: 3, name: 'Intersection 3', status: 'GREEN', assignedVideo: null },
    { id: 4, name: 'Intersection 4', status: 'RED', assignedVideo: null },
  ]);

  const [cameraFeeds, setCameraFeeds] = useState<CameraFeed[]>([
    { id: 'camera1', name: 'Camera 1', isActive: false, currentVideo: null },
    { id: 'camera2', name: 'Camera 2', isActive: false, currentVideo: null },
  ]);

  const [confirmationDialog, setConfirmationDialog] = useState<ConfirmationDialog>({
    isOpen: false,
    intersectionId: null,
    newStatus: null,
  });

  // Track if videos have been initially assigned to intersections
  const [videosAssigned, setVideosAssigned] = useState(false);

  // Timer for random signal changes
  useEffect(() => {
    const interval = setInterval(() => {
      setIntersections(prev => prev.map(intersection => ({
        ...intersection,
        status: Math.random() > 0.5 ? 'RED' : 'GREEN'
      })));
    }, Math.random() * 30000 + 30000); // 30-60 seconds

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    const storedRegion = localStorage.getItem('selectedRegion');
    if (storedRegion) {
      const region = JSON.parse(storedRegion);
      setSelectedRegion(region);
    }
  }, []);

  useEffect(() => {
    let unsubscribe: (() => void) | null = null;
    
    if (selectedRegion && mapRef.current && !mapInstanceRef.current) {
      setTimeout(() => {
        unsubscribe = initializeMap();
      }, 100);
    }
    
    return () => {
      if (unsubscribe) {
        unsubscribe();
      }
      if (mapInstanceRef.current) {
        mapInstanceRef.current.remove();
        mapInstanceRef.current = null;
      }
    };
  }, [selectedRegion, expandedCard]);

  const getRandomVideo = (excludeVideos: string[] = []): string => {
    const availableVideos = AVAILABLE_VIDEOS.filter(video => !excludeVideos.includes(video));
    if (availableVideos.length === 0) return AVAILABLE_VIDEOS[0]; // fallback
    return availableVideos[Math.floor(Math.random() * availableVideos.length)];
  };

  const handleSignalControl = (intersectionId: number, newStatus: 'RED' | 'GREEN' | 'YELLOW') => {
    setConfirmationDialog({
      isOpen: true,
      intersectionId,
      newStatus,
    });
  };

  const confirmSignalChange = () => {
    if (confirmationDialog.intersectionId && confirmationDialog.newStatus) {
      setIntersections(prev => prev.map(intersection => 
        intersection.id === confirmationDialog.intersectionId
          ? { ...intersection, status: confirmationDialog.newStatus as 'RED' | 'GREEN' | 'YELLOW' }
          : intersection
      ));
    }
    setConfirmationDialog({ isOpen: false, intersectionId: null, newStatus: null });
  };

  const handleLiveFeed = () => {
    // Only assign videos to intersections if they haven't been assigned yet
    if (!videosAssigned) {
      const usedVideos: string[] = [];
      const updatedIntersections = intersections.map(intersection => {
        const availableVideos = AVAILABLE_VIDEOS.filter(video => !usedVideos.includes(video));
        if (availableVideos.length > 0) {
          const randomVideo = availableVideos[Math.floor(Math.random() * availableVideos.length)];
          usedVideos.push(randomVideo);
          return { ...intersection, assignedVideo: randomVideo };
        }
        return intersection;
      });
      setIntersections(updatedIntersections);
      setVideosAssigned(true);
    }

    // Handle camera feed assignment
    const newVideo = getRandomVideo();
    
    setCameraFeeds(prev => {
      const camera1 = prev.find(feed => feed.id === 'camera1');
      const camera2 = prev.find(feed => feed.id === 'camera2');
      
      if (!camera1?.currentVideo) {
        // Camera 1 is empty
        return prev.map(feed => 
          feed.id === 'camera1' 
            ? { ...feed, isActive: true, currentVideo: newVideo }
            : feed
        );
      } else if (!camera2?.currentVideo) {
        // Camera 2 is empty
        return prev.map(feed => 
          feed.id === 'camera2' 
            ? { ...feed, isActive: true, currentVideo: newVideo }
            : feed
        );
      } else {
        // Both are occupied, overwrite Camera 1
        return prev.map(feed => 
          feed.id === 'camera1' 
            ? { ...feed, isActive: true, currentVideo: newVideo }
            : feed
        );
      }
    });

    // Update global video state for backward compatibility
    setVideos([newVideo]);
  };

  const initializeMap = () => {
    if (!selectedRegion || !mapRef.current) return;

    if (mapInstanceRef.current) {
      mapInstanceRef.current.remove();
      mapInstanceRef.current = null;
    }

    const savedMapState = JSON.parse(localStorage.getItem('mapState') || '{}');

    const mapCenter = savedMapState.center || L.latLng(selectedRegion.lat, selectedRegion.lng);
    const mapZoom = savedMapState.zoom || 16;

    const map = L.map(mapRef.current, {
      center: mapCenter,
      zoom: mapZoom,
      zoomControl: false,
      attributionControl: true,
      maxZoom: 17,
      minZoom: 15,
      preferCanvas: false,
    });

    map.on('moveend', () => {
      localStorage.setItem('mapState', JSON.stringify({ center: map.getCenter(), zoom: map.getZoom() }));
    });

    map.on('zoomend', () => {
      localStorage.setItem('mapState', JSON.stringify({ center: map.getCenter(), zoom: map.getZoom() }));
    });

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'OpenStreetMap contributors'
    }).addTo(map);

    map.createPane('circlePane');
    map.getPane('circlePane')!.style.zIndex = '400';
    map.createPane('nodesPane');
    map.getPane('nodesPane')!.style.zIndex = '450';

    circleRef.current = L.circle([selectedRegion.lat, selectedRegion.lng], {
      pane: 'circlePane',
      radius: 1000,
      color: '#3b82f6',
      weight: 2,
      opacity: 0.8,
      fillColor: '#3b82f6',
      fillOpacity: 0.1
    }).addTo(map);

    nodesLayerRef.current = L.layerGroup().addTo(map);
    mapInstanceRef.current = map;

    const trafficNodeService = TrafficNodeService.getInstance();
    const serviceCenter = L.latLng(selectedRegion.lat, selectedRegion.lng);
  
    const displayTrafficNodes = (nodes: any[]) => {
      if (!nodesLayerRef.current) return;
      
      nodesLayerRef.current.clearLayers();

      nodes.forEach((node) => {
        const color = node.severity === 'red' ? '#ef4444' : '#f59e0b';
        
        L.circle([node.lat, node.lng], {
          pane: 'nodesPane',
          radius: node.radius,
          color: color,
          weight: 1,
          opacity: 0.0,
          fillColor: color,
          fillOpacity: 0.35
        }).addTo(nodesLayerRef.current!);

        L.circleMarker([node.lat, node.lng], {
          pane: 'nodesPane',
          radius: 6,
          color: color,
          weight: 2,
          opacity: 1.0,
          fillColor: color,
          fillOpacity: 0.8
        }).addTo(nodesLayerRef.current!);
      });
    };
  
    const unsubscribe = trafficNodeService.subscribe((nodes) => {
      const nodesInRadius = trafficNodeService.getNodesInRadius(serviceCenter, 1000);
      displayTrafficNodes(nodesInRadius);
      setTrafficNodes(nodesInRadius);
    });

    setTimeout(() => {
      const currentNodes = trafficNodeService.getCurrentNodes();
      const nodesInRadius = trafficNodeService.getNodesInRadius(serviceCenter, 1000);
      displayTrafficNodes(nodesInRadius);
      setTrafficNodes(nodesInRadius);
      map.invalidateSize();
    }, 300);

    return unsubscribe;
  };

  const handleZoomIn = () => {
    if (mapInstanceRef.current) {
      mapInstanceRef.current.zoomIn();
    }
  };

  const handleZoomOut = () => {
    if (mapInstanceRef.current) {
      mapInstanceRef.current.zoomOut();
    }
  };

  const handleRefresh = () => {
    const trafficNodeService = TrafficNodeService.getInstance();
    trafficNodeService.refresh();
  };

  const getTrafficColor = (level: string) => {
    switch (level) {
      case 'High': return 'text-red-500';
      case 'Medium': return 'text-yellow-500';
      case 'Low': return 'text-green-500';
      default: return 'text-gray-500';
    }
  };

  const getStatusColor = (status: 'RED' | 'GREEN' | 'YELLOW') => {
    switch (status) {
      case 'RED': return 'text-red-500';
      case 'GREEN': return 'text-green-500';
      case 'YELLOW': return 'text-yellow-500';
      default: return 'text-gray-500';
    }
  };

  const getStatusBadgeVariant = (status: 'RED' | 'GREEN' | 'YELLOW') => {
    switch (status) {
      case 'RED': return 'destructive';
      case 'GREEN': return 'default';
      case 'YELLOW': return 'secondary';
      default: return 'secondary';
    }
  };

  const getStatusBackgroundColor = (status: 'RED' | 'GREEN' | 'YELLOW') => {
    switch (status) {
      case 'RED': return 'bg-red-500/20 border-red-500/30';
      case 'GREEN': return 'bg-green-500/20 border-green-500/30';
      case 'YELLOW': return 'bg-yellow-500/20 border-yellow-500/30';
      default: return 'bg-gray-500/20 border-gray-500/30';
    }
  };

  const getStatusDotColor = (status: 'RED' | 'GREEN' | 'YELLOW') => {
    switch (status) {
      case 'RED': return 'bg-red-500';
      case 'GREEN': return 'bg-green-500';
      case 'YELLOW': return 'bg-yellow-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div className="h-screen flex bg-background overflow-hidden">
      <Sidebar />
      
      <div className="flex-1 flex flex-col p-4 overflow-hidden">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-2xl font-bold text-foreground">Live Camera Feed</h1>
            <p className="text-muted-foreground">
              {selectedRegion ? `Monitoring 1km radius around selected location` : 'Double-click on the main map to select a region'}
            </p>
          </div>
          <div className="flex items-center gap-2">
            {selectedRegion && (
              <Badge variant="secondary" className="text-xs">
                <Activity className="h-3 w-3 mr-1" />
                1 Region Active
              </Badge>
            )}
          </div>
        </div>

        <div className="flex-1 flex flex-col gap-4 overflow-hidden">
          {/* Camera Feeds */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {selectedRegion ? (
              <Card className="bg-gradient-card border-border/50 backdrop-blur-glass aspect-square flex flex-col">
                <CardHeader className="pb-2 flex-shrink-0">
                  <CardTitle className="flex items-center justify-between text-sm">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-green-500" />
                      <span className="font-medium">Selected Region</span>
                    </div>
                    <Badge variant="outline" className="text-xs px-2 py-1">
                      1km
                    </Badge>
                  </CardTitle>
                  <div className="flex items-center gap-1 text-xs text-muted-foreground truncate">
                    <MapPin className="h-3 w-3 flex-shrink-0" />
                    <span className="truncate">{selectedRegion.address.split(',')[0]}</span>
                  </div>
                </CardHeader>
                
                <CardContent className="pt-0 pb-3 flex-1 flex flex-col">
                  <div className="relative flex-1 bg-black rounded-md mb-3 overflow-hidden">
                    <div className="w-full h-full bg-gradient-to-br from-gray-800 to-gray-900">
                      <div ref={mapRef} className="w-full h-full" />
                    </div>
                    
                    <div className="absolute inset-0 pointer-events-none z-20">
                      <div className="absolute bottom-3 left-3 pointer-events-auto">
                        <Button
                          size="sm"
                          variant="secondary"
                          className="h-9 w-9 p-0 bg-black/80 hover:bg-black/90 text-white shadow-xl border-2 border-white/30 backdrop-blur-sm"
                          onClick={handleRefresh}
                          title="Refresh traffic data"
                        >
                          <RefreshCw className="h-4 w-4" />
                        </Button>
                      </div>
                      <div className="absolute bottom-3 right-3 pointer-events-auto">
                        <Button
                          size="sm"
                          variant="secondary"
                          className="h-9 w-9 p-0 bg-black/80 hover:bg-black/90 text-white shadow-xl border-2 border-white/30 backdrop-blur-sm transition-all duration-200 hover:scale-110 active:scale-95"
                          onClick={() => setExpandedCard('selectedRegion')}
                          title="Expand card"
                        >
                          <Expand className="h-4 w-4 transition-transform duration-200" />
                        </Button>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-1 flex-shrink-0">
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center gap-1">
                        <AlertTriangle className={`h-3 w-3 ${getTrafficColor(selectedRegion.trafficLevel)}`} />
                        <span className={getTrafficColor(selectedRegion.trafficLevel)}>{selectedRegion.trafficLevel}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Car className="h-3 w-3 text-muted-foreground" />
                        <span className="text-foreground">{selectedRegion.vehicleCount}</span>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between text-xs text-muted-foreground">
                      <span>Updated: {selectedRegion.lastUpdate}</span>
                      <Badge variant="default" className="text-xs px-2 py-1">
                        Active
                      </Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ) : (
              <Card className="bg-gradient-card border-border/50 backdrop-blur-glass opacity-50 aspect-square flex flex-col">
                <CardHeader className="pb-2 flex-shrink-0">
                  <CardTitle className="flex items-center justify-between text-sm">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-gray-500" />
                      <span className="font-medium">No Region</span>
                    </div>
                    <Badge variant="secondary" className="text-xs px-2 py-1">
                      Inactive
                    </Badge>
                  </CardTitle>
                  <div className="flex items-center gap-1 text-xs text-muted-foreground">
                    <MapPin className="h-3 w-3" />
                    <span>Select region</span>
                  </div>
                </CardHeader>
                
                <CardContent className="pt-0 pb-3 flex-1 flex flex-col">
                  <div className="relative flex-1 bg-gray-900 rounded-md mb-3 overflow-hidden flex items-center justify-center">
                    <div className="text-center text-white/30">
                      <MapPin className="h-8 w-8 mx-auto mb-2" />
                      <p className="text-sm">No Region</p>
                    </div>
                  </div>

                  <div className="space-y-1 flex-shrink-0">
                    <div className="flex items-center justify-between text-sm">
                      <div className="flex items-center gap-1">
                        <AlertTriangle className="h-3 w-3 text-gray-500" />
                        <span className="text-gray-500">-</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Car className="h-3 w-3 text-muted-foreground" />
                        <span className="text-foreground">0</span>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between text-xs text-muted-foreground">
                      <span>Double-click map</span>
                      <Badge variant="secondary" className="text-xs px-2 py-1">
                        Inactive
                      </Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Camera 1 */}
            <Card className={`bg-gradient-card border-border/50 backdrop-blur-glass aspect-square flex flex-col ${!cameraFeeds.find(f => f.id === 'camera1')?.isActive ? 'opacity-50' : ''}`}>
              <CardHeader className="pb-2 flex-shrink-0">
                <CardTitle className="flex items-center justify-between text-sm">
                  <div className="flex items-center gap-2">
                    <div className={`w-2 h-2 rounded-full ${cameraFeeds.find(f => f.id === 'camera1')?.isActive ? 'bg-green-500' : 'bg-gray-600'}`} />
                    <span className="font-medium">Camera 1</span>
                  </div>
                  <Badge variant={cameraFeeds.find(f => f.id === 'camera1')?.isActive ? "outline" : "secondary"} className="text-xs px-2 py-1">
                    {cameraFeeds.find(f => f.id === 'camera1')?.isActive ? "Live" : "Offline"}
                  </Badge>
                </CardTitle>
                <div className="flex items-center gap-1 text-xs text-muted-foreground">
                  <MapPin className="h-3 w-3" />
                  <span>{cameraFeeds.find(f => f.id === 'camera1')?.isActive ? "Active Feed" : "Not available"}</span>
                </div>
              </CardHeader>
              <CardContent className="pt-0 pb-3 flex-1 flex flex-col">
                <div className="relative flex-1 bg-black rounded-md mb-3 overflow-hidden">
                  {cameraFeeds.find(f => f.id === 'camera1')?.currentVideo ? (
                    <VideoPlayer 
                      videoSrc={cameraFeeds.find(f => f.id === 'camera1')?.currentVideo!} 
                      initialTime={videoTimeRef.current} 
                      onTimeUpdate={(time) => { videoTimeRef.current = time; }} 
                    />
                  ) : (
                    <div className="w-full h-full bg-gradient-to-br from-gray-800 to-gray-900 flex items-center justify-center text-white/30">
                      <p>No video feed</p>
                    </div>
                  )}
                  
                  {/* Expand button for Camera 1 */}
                  <div className="absolute inset-0 pointer-events-none z-20">
                    <div className="absolute bottom-3 right-3 pointer-events-auto">
                      <Button
                        size="sm"
                        variant="secondary"
                        className="h-9 w-9 p-0 bg-black/80 hover:bg-black/90 text-white shadow-xl border-2 border-white/30 backdrop-blur-sm transition-all duration-200 hover:scale-110 active:scale-95"
                        onClick={() => setExpandedCard('camera1')}
                        title="Expand camera feed"
                      >
                        <Expand className="h-4 w-4 transition-transform duration-200" />
                      </Button>
                    </div>
                  </div>
                </div>
                <div className="space-y-1 flex-shrink-0">
                  <div className="flex items-center justify-between text-sm text-gray-500">
                    <span>Status: {cameraFeeds.find(f => f.id === 'camera1')?.isActive ? "Active" : "Offline"}</span>
                    <Badge variant="secondary" className="text-xs px-2 py-1">
                      {cameraFeeds.find(f => f.id === 'camera1')?.isActive ? "Live" : "N/A"}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Camera 2 */}
            <Card className={`bg-gradient-card border-border/50 backdrop-blur-glass aspect-square flex flex-col ${!cameraFeeds.find(f => f.id === 'camera2')?.isActive ? 'opacity-50' : ''}`}>
              <CardHeader className="pb-2 flex-shrink-0">
                <CardTitle className="flex items-center justify-between text-sm">
                  <div className="flex items-center gap-2">
                    <div className={`w-2 h-2 rounded-full ${cameraFeeds.find(f => f.id === 'camera2')?.isActive ? 'bg-green-500' : 'bg-gray-600'}`} />
                    <span className="font-medium">Camera 2</span>
                  </div>
                  <Badge variant={cameraFeeds.find(f => f.id === 'camera2')?.isActive ? "outline" : "secondary"} className="text-xs px-2 py-1">
                    {cameraFeeds.find(f => f.id === 'camera2')?.isActive ? "Live" : "Offline"}
                  </Badge>
                </CardTitle>
                <div className="flex items-center gap-1 text-xs text-muted-foreground">
                  <MapPin className="h-3 w-3" />
                  <span>{cameraFeeds.find(f => f.id === 'camera2')?.isActive ? "Active Feed" : "Not available"}</span>
                </div>
              </CardHeader>
              <CardContent className="pt-0 pb-3 flex-1 flex flex-col">
                <div className="relative flex-1 bg-black rounded-md mb-3 overflow-hidden">
                  {cameraFeeds.find(f => f.id === 'camera2')?.currentVideo ? (
                    <VideoPlayer 
                      videoSrc={cameraFeeds.find(f => f.id === 'camera2')?.currentVideo!} 
                      initialTime={videoTimeRef.current} 
                      onTimeUpdate={(time) => { videoTimeRef.current = time; }} 
                    />
                  ) : (
                    <div className="w-full h-full bg-gradient-to-br from-gray-800 to-gray-900 flex items-center justify-center text-white/30">
                      <p>No video feed</p>
                    </div>
                  )}
                  
                  {/* Expand button for Camera 2 */}
                  <div className="absolute inset-0 pointer-events-none z-20">
                    <div className="absolute bottom-3 right-3 pointer-events-auto">
                      <Button
                        size="sm"
                        variant="secondary"
                        className="h-9 w-9 p-0 bg-black/80 hover:bg-black/90 text-white shadow-xl border-2 border-white/30 backdrop-blur-sm transition-all duration-200 hover:scale-110 active:scale-95"
                        onClick={() => setExpandedCard('camera2')}
                        title="Expand camera feed"
                      >
                        <Expand className="h-4 w-4 transition-transform duration-200" />
                      </Button>
                    </div>
                  </div>
                </div>
                <div className="space-y-1 flex-shrink-0">
                  <div className="flex items-center justify-between text-sm text-gray-500">
                    <span>Status: {cameraFeeds.find(f => f.id === 'camera2')?.isActive ? "Active" : "Offline"}</span>
                    <Badge variant="secondary" className="text-xs px-2 py-1">
                      {cameraFeeds.find(f => f.id === 'camera2')?.isActive ? "Live" : "N/A"}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Intersections Section */}
          <div className="flex-1 min-h-0">
            <Card className="h-full bg-gradient-card border-border/50 backdrop-blur-glass">
              <CardContent className="p-4 flex-1 overflow-auto">
                <div className="space-y-4">
                  {intersections.map((intersection) => (
                    <div key={intersection.id} className="flex items-center justify-between p-4 bg-secondary/20 rounded-lg border border-border/30">
                      <div className="flex items-center gap-3">
                        <span className="font-medium">{intersection.name}</span>
                        <span className="text-sm text-muted-foreground">current status:</span>
                        <div className={`px-3 py-1 rounded-full border ${getStatusBackgroundColor(intersection.status)}`}>
                          <div className="flex items-center gap-2">
                            <div className={`w-2 h-2 rounded-full ${getStatusDotColor(intersection.status)}`} />
                            <span className={`text-sm font-medium ${getStatusColor(intersection.status)}`}>
                              {intersection.status}
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-3">
                        <Select onValueChange={(value: 'RED' | 'GREEN' | 'YELLOW') => handleSignalControl(intersection.id, value)}>
                          <SelectTrigger className="w-44 h-10 bg-primary/10 border-primary/20 hover:bg-primary/20 transition-colors">
                            <div className="flex items-center gap-2">
                              <Settings className="h-4 w-4 text-primary" />
                              <SelectValue placeholder="Control Signal" />
                            </div>
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="RED" className="flex items-center gap-2">
                              <div className="w-3 h-3 rounded-full bg-red-500"></div>
                              RED
                            </SelectItem>
                            <SelectItem value="GREEN" className="flex items-center gap-2">
                              <div className="w-3 h-3 rounded-full bg-green-500"></div>
                              GREEN
                            </SelectItem>
                            <SelectItem value="YELLOW" className="flex items-center gap-2">
                              <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
                              YELLOW
                            </SelectItem>
                          </SelectContent>
                        </Select>
                        
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={handleLiveFeed}
                          className="h-10 px-4 bg-gradient-to-r from-blue-500/10 to-purple-500/10 border-blue-500/20 hover:from-blue-500/20 hover:to-purple-500/20 hover:border-blue-500/30 transition-all duration-200 hover:scale-105"
                        >
                          <div className="flex items-center gap-2">
                            <Video className="h-4 w-4 text-blue-500" />
                            <span className="font-medium">LIVE FEED</span>
                          </div>
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Confirmation Dialog */}
      <AlertDialog open={confirmationDialog.isOpen} onOpenChange={(open) => !open && setConfirmationDialog({ isOpen: false, intersectionId: null, newStatus: null })}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Confirm Signal Override</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to override the signal at {intersections.find(i => i.id === confirmationDialog.intersectionId)?.name} to {confirmationDialog.newStatus}? This will override the current automatic signal.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={confirmSignalChange}>
              Yes, Override Signal
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default Camera;
